{
  "name": "Letter-scanner",
  "tagline": "",
  "body": "This program uses LEGO MindStorms EV3 robot a letter scanner. It will:\r\n\r\n# Serialization of rules\r\n\r\nFirst, it loads a text file containing IF THEN rules. The syntax of the rules is:\r\n\r\n(0,0), (0,1), (1,0), (2,0), (2,1) -> C \r\n\r\n(5,2), (4,3), C -> G\r\n\r\nwhere (0,0) refers to the grid coordinates of the pixels scanned by the robot. Note that:\r\n\r\nThe coordinates on the LHS may not be listed in any sorted order in the text file.\r\n\r\nThe letters in the rules may not be single-character, e.g., if we use the Greek character set, the letters may be alpha, beta, etc.\r\n\r\n(0,0) refers to the top left of the pixel grid.\r\n\r\n# AI algorithms \r\n\r\nIt offers the user the option to do forward reasoning or backward reasoning:\r\n\r\n## i. Forward Reasoning:\r\n\r\ni. It compiles the rules into a binary decision tree, wherein, each node is a pixel, and its two children represent the pixel being on or off.\r\n\r\nii. It scans the pixels in an order determined by you: row-major - this will the same order used for the binary decision tree.\r\n\r\niii. After reaching each new pixel, it prints all the remaining candidates as per the decision tree, e.g., after finding that pixel (0,0) is off, the remaining candidates may be only A or I.\r\n\r\niv. It traverses the decision tree and print all the deductions, e.g., in the above example, not only that the scanned pixels ultimately represent G (a leaf node in your decision tree), but en-route, some subset also represents C (an intermediate node in the decision tree).\r\n\r\nv. If the scanned pixels are not an exact match to any character in the rule base, it prints the possible candidates - these are the leaf nodes in the subtree whose root is the intermediate node where the reasoning ends. \r\n\r\n## ii. Backward Reasoning:\r\n\r\ni. It asks the user for the character that should be recognized.\r\n\r\nii. It scans only the pixels on the LHS of the rule for that character. (This could mean, considering additional rules, e.g., to recognize G, it should also consider the rule for C above).\r\n\r\niii.  The moment a pixel expected to be on is found to be off, it immediatelys report that the character was not found, and stop.\r\n\r\n# Robot behaviour\r\n\r\n##  Calibration: \r\n\r\nIf this choice is selected, the robot cycles through the following three inputs:\r\n\r\ni. Read the ON color - you place the robot on an on strip, it reads the light sensor and saves the value\r\n\r\nii. Read the OFF color - you place the robot on an off strip, it reads the light sensor and saves the value\r\n\r\niii. Read the pixel size - you place your robot just before the pixel. It reads the distance traveled between two transitions: off-to-on and on-back-to-off. This is the size of a pixel (assumed to be square).\r\n\r\n## Scan: \r\n\r\nIf this choice is selected, the robot offers two options:\r\n\r\n### Forward Reasoning:\r\n\r\nIt scans the pixel grid in row major order. It emits three different sound patterns (with accompanying display behaviors):\r\n\r\n1. A sound every time it reads a pixel, on or off. On the screen, it displays the coordinates of the pixel it thinks it is scanning (e.g., 2 3), followed by the remaining candidates as per the decision tree;\r\n\r\n2. A sound pattern when it successfully identifies a letter in its rule base. On the screen, it displays its deductions, i.e., all the letters represented by the pixel pattern and sub-patterns, if any;\r\n\r\n3. A sound pattern if it fails to find any letter in its rule base. On the screen, it displays the possible candidates.\r\n\r\n### Backward Reasoning:\r\n\r\ni. It displays the letters for which rules are provided in the rule base;\r\n\r\nii. It lets the user select the target letter using one of its buttons;\r\n\r\niii. It then proceeds to scan. It emits three sound patterns with accompanying display behaviors as follows:\r\n\r\n1. A sound every time it reads a pixel, on or off. On the screen, it displays the coordinates of the pixel it thinks it is scanning (e.g., 2 3).\r\n\r\n2. A sound pattern when it successfully identifies a letter in its rule base. On the screen, it displays success.\r\n\r\n3. A sound pattern if it finds a pixel to be off that should be on. On the screen, it displays failure.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}